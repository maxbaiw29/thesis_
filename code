import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from codecarbon import EmissionsTracker
from tracarbon import MetricGenerator, HardwareInfo
from tracarbon.exporters import Metric, Tag, JSONExporter

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

# Preprocess the data
x_train = x_train.reshape(-1, 28, 28, 1).astype('float32') / 255.0
x_test = x_test.reshape(-1, 28, 28, 1).astype('float32') / 255.0
y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)

# Define the model
inputs = keras.Input(shape=(28, 28, 1))
x = layers.Conv2D(16, kernel_size=(3, 3), activation='relu', padding='same')(inputs)

# Convolutional block 1
activation = 'relu'
shortcut = x
x = layers.Conv2D(filters=32, kernel_size=3, strides=1, padding='same')(x)
x = layers.Activation(activation)(x)
shortcut = layers.Conv2D(filters=32, kernel_size=3, strides=1, padding='same')(shortcut)# Adjusted shortcut
x = layers.add([x, shortcut])
x = layers.Activation(activation)(x)


# Convolutional block 2
shortcut = x
x = layers.Conv2D(filters=64, kernel_size=3, strides=1, padding='same')(x)
x = layers.Activation(activation)(x)
shortcut = layers.Conv2D(filters=64, kernel_size=3, strides=1, padding='same')(shortcut)# Adjusted shortcut
x = layers.add([x, shortcut])
x = layers.Activation(activation)(x)

# Convolutional block 3
shortcut = x
x = layers.Conv2D(filters=156, kernel_size=3, strides=1, padding='same')(x)
x = layers.Activation(activation)(x)
shortcut = layers.Conv2D(filters=156, kernel_size=3, strides=1, padding='same')(shortcut)# Adjusted shortcut
x = layers.add([x, shortcut])
x = layers.Activation(activation)(x)


# Global Average Pooling
x = layers.GlobalAveragePooling2D()(x)

# Fully-connected layer
x = layers.Dense(256, activation='relu')(x)

# Softmax activation
outputs = layers.Dense(10, activation='softmax')(x)

# Create the model
model = keras.Model(inputs=inputs, outputs=outputs)
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

configuration = TracarbonConfiguration(co2signal_api_key="UALiba5FEs7d2negQ7CEVrEHeHjwpkLz", env_file_path="/Users/maxbaiwir/These- Final version algorithm/untitled.json")  # Your configuration
tracarbon = TracarbonBuilder(configuration=configuration).build()
tracarbon.start()
model.fit(x_train, y_train, batch_size=128, epochs=1, validation_data=(x_test, y_test))
tracarbon.stop()



